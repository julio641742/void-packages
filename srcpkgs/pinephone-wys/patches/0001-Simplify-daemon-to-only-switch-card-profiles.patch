From f66610d26395de15e3928cf4284573ca9cfabf26 Mon Sep 17 00:00:00 2001
From: Arnaud Ferraris <arnaud.ferraris@collabora.com>
Date: Fri, 6 Mar 2020 02:01:52 +0100
Subject: [PATCH] Simplify daemon to only switch card profiles

As a PoC for the PinePhone, we want to only switch card profiles:
- when a call starts, use the "Voice Call" profile: audio is output on
the earpiece, and the internal microphone is unmuted
- when a call is terminated, switch back to the default "HiFi" profile,
using the main speaker

This should fully cover the most basic use-case. Headset will not work,
and there is also no support for a "silent mode", but this is enough to
demonstrate voice calls for the PinePhone.
---
diff --git meson.build meson.build
index 5938cec..7516208 100644
--- meson.build
+++ meson.build
@@ -33,11 +33,6 @@ project (
     ],
 )
 
-
-libmchk_proj = subproject('libmachine-check')
-libmchk_dep = libmchk_proj.get_variable('libmachine_check_dep')
-
-
 app_name = meson.project_name()
 
 prefix = get_option('prefix')
@@ -63,14 +58,3 @@ config_data.set_quoted('DATADIR', full_datadir)
 config_data.set_quoted('SYSCONFDIR', full_sysconfdir)
 
 subdir('src')
-
-install_subdir (
-  'machine-conf',
-  install_dir : join_paths(datadir, app_name)
-)
-
-install_subdir (
-  'machine-check',
-  install_dir : join_paths(datadir, 'machine-check', app_name),
-  strip_directory : true
-)
diff --git src/main.c src/main.c
index 587a5f3..4631a33 100644
--- src/main.c
+++ src/main.c
@@ -23,10 +23,8 @@
  */
 
 #include "wys-modem.h"
-#include "wys-audio.h"
 #include "util.h"
 #include "config.h"
-#include "mchk-machine-check.h"
 
 #include <libmm-glib.h>
 #include <glib.h>
@@ -50,8 +48,6 @@ static GMainLoop *main_loop = NULL;
 
 struct wys_data
 {
-  /** PulseAudio interface */
-  WysAudio *audio;
   /** ID for the D-Bus watch */
   guint watch_id;
   /** ModemManager object proxy */
@@ -59,51 +55,112 @@ struct wys_data
   /** Map of D-Bus object paths to WysModems */
   GHashTable *modems;
   /** How many modems have audio, in each direction */
-  guint audio_count[2];
+  guint audio_count;
 };
 
+static gboolean
+ugly_system (const gchar *cmd)
+{
+  gchar *out = NULL, *err = NULL;
+  gint status;
+  GError *error = NULL;
+  gboolean ok;
+
+  g_debug ("Executing command `%s'", cmd);
+
+  ok = g_spawn_command_line_sync
+    (cmd, &out, &err, &status, &error);
+
+  if (!ok)
+    {
+      g_warning ("Error spawning command `%s': %s'",
+                 cmd, error->message);
+      g_error_free (error);
+      return FALSE;
+    }
+
+  ok = g_spawn_check_exit_status (status, &error);
+  if (ok)
+    {
+      g_debug ("Command `%s' executed successfully"
+               "; stdout: `%s'; stderr: `%s'",
+               cmd, out, err);
+    }
+  else
+    {
+      g_warning ("Command `%s' failed: %s"
+                 "; stdout: `%s'; stderr: `%s'",
+                 cmd, error->message, out, err);
+      g_error_free (error);
+    }
+
+  g_free (out);
+  g_free (err);
+
+  return ok;
+}
+
+#define UGLY_CARD "alsa_card.platform-sound"
+
+static gboolean
+ugly_set_card_profile (const gchar *card,
+                       const gchar *profile)
+{
+  g_autofree gchar *cmd = NULL;
+
+  cmd = g_strdup_printf ("pactl set-card-profile '%s' '%s'", card, profile);
+
+  return ugly_system (cmd);
+}
+
+static gboolean
+ugly_set_voice_call (void)
+{
+  return ugly_set_card_profile (UGLY_CARD, "Voice Call");
+}
+
+static gboolean
+ugly_set_hifi (void)
+{
+  return ugly_set_card_profile (UGLY_CARD, "HiFi");
+}
 
 static void
 update_audio_count (struct wys_data *data,
-                    WysDirection     direction,
                     gint             delta)
 {
-  const guint old_count = data->audio_count[direction];
+  const guint old_count = data->audio_count;
 
-  g_assert (delta >= 0 || data->audio_count[direction] > 0);
+  g_assert (delta >= 0 || data->audio_count > 0);
 
-  data->audio_count[direction] += delta;
+  data->audio_count += delta;
 
-  if (data->audio_count[direction] > 0 && old_count == 0)
+  if (data->audio_count > 0 && old_count == 0)
     {
-      g_debug ("Audio %s now present",
-               wys_direction_get_description (direction));
-      wys_audio_ensure_loopback (data->audio, direction);
+      g_message ("Audio now present");
+      ugly_set_voice_call ();
     }
-  else if (data->audio_count[direction] == 0 && old_count > 0)
+  else if (data->audio_count == 0 && old_count > 0)
     {
-      g_debug ("Audio %s now absent",
-               wys_direction_get_description (direction));
-      wys_audio_ensure_no_loopback (data->audio, direction);
+      g_message ("Audio now absent");
+      ugly_set_hifi ();
     }
 }
 
 
 static void
 audio_present_cb (struct wys_data *data,
-                  WysDirection     direction,
                   WysModem        *modem)
 {
-  update_audio_count (data, direction, +1);
+  update_audio_count (data, +1);
 }
 
 
 static void
 audio_absent_cb (struct wys_data *data,
-                 WysDirection     direction,
                  WysModem        *modem)
 {
-  update_audio_count (data, direction, -1);
+  update_audio_count (data, -1);
 }
 
 
@@ -123,7 +180,7 @@ add_modem (struct wys_data *data,
       return;
     }
 
-  g_debug ("Adding new voice-capable modem `%s'", path);
+  g_message ("Adding new voice-capable modem `%s'", path);
 
   g_assert (MM_IS_OBJECT (object));
   voice = mm_object_get_modem_voice (MM_OBJECT (object));
@@ -153,7 +210,7 @@ interface_added_cb (struct wys_data *data,
 
   info = g_dbus_interface_get_info (interface);
 
-  g_debug ("ModemManager interface `%s' found on object `%s'",
+  g_message ("ModemManager interface `%s' found on object `%s'",
            info->name,
            g_dbus_object_get_object_path (object));
 
@@ -184,7 +241,7 @@ interface_removed_cb (struct wys_data *data,
   path = g_dbus_object_get_object_path (object);
   info = g_dbus_interface_get_info (interface);
 
-  g_debug ("ModemManager interface `%s' removed on object `%s'",
+  g_message ("ModemManager interface `%s' removed on object `%s'",
            info->name, path);
 
   if (g_strcmp0 (info->name, MM_DBUS_INTERFACE_MODEM_VOICE) == 0)
@@ -229,7 +286,7 @@ void
 object_added_cb (struct wys_data *data,
                  GDBusObject     *object)
 {
-  g_debug ("ModemManager object `%s' added",
+  g_message ("ModemManager object `%s' added",
            g_dbus_object_get_object_path (object));
 
   add_mm_object (data, object);
@@ -243,7 +300,7 @@ object_removed_cb (struct wys_data *data,
   const gchar *path;
 
   path = g_dbus_object_get_object_path (object);
-  g_debug ("ModemManager object `%s' removed", path);
+  g_message ("ModemManager object `%s' removed", path);
 
   remove_modem_object (data, path, object);
 }
@@ -286,7 +343,7 @@ mm_appeared_cb (GDBusConnection *connection,
                 const gchar *name_owner,
                 struct wys_data *data)
 {
-  g_debug ("ModemManager appeared on D-Bus");
+  g_message ("ModemManager appeared on D-Bus");
 
   mm_manager_new (connection,
                   G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE,
@@ -310,18 +367,14 @@ mm_vanished_cb (GDBusConnection *connection,
                 const gchar *name,
                 struct wys_data *data)
 {
-  g_debug ("ModemManager vanished from D-Bus");
+  g_message ("ModemManager vanished from D-Bus");
   clear_dbus (data);
 }
 
 
 static void
-set_up (struct wys_data *data,
-        const gchar *codec,
-        const gchar *modem)
+set_up (struct wys_data *data)
 {
-  data->audio = wys_audio_new (codec, modem);
-
   data->modems = g_hash_table_new_full (g_str_hash, g_str_equal,
                                         g_free, g_object_unref);
 
@@ -333,7 +386,7 @@ set_up (struct wys_data *data,
                       (GBusNameVanishedCallback)mm_vanished_cb,
                       data, NULL);
 
-  g_debug ("Watching for ModemManager");
+  g_message ("Watching for ModemManager");
 }
 
 
@@ -343,23 +396,19 @@ tear_down (struct wys_data *data)
   clear_dbus (data);
   g_bus_unwatch_name (data->watch_id);
   g_hash_table_unref (data->modems);
-  g_object_unref (G_OBJECT (data->audio));
 }
 
 
 static void
-run (const gchar *codec,
-     const gchar *modem)
+run (void)
 {
   struct wys_data data;
 
   memset (&data, 0, sizeof (struct wys_data));
-  set_up (&data, codec, modem);
+  set_up (&data);
 
   main_loop = g_main_loop_new (NULL, FALSE);
 
-  printf (APPLICATION_NAME " started with codec `%s', modem `%s'\n",
-          codec, modem);
   g_main_loop_run (main_loop);
 
   g_main_loop_unref (main_loop);
@@ -368,33 +417,6 @@ run (const gchar *codec,
   tear_down (&data);
 }
 
-
-static void
-check_machine (const gchar *machine)
-{
-  gboolean ok, passed;
-  GError *error = NULL;
-
-  ok = mchk_check_machine (APP_DATA_NAME,
-                           machine,
-                           &passed,
-                           &error);
-  if (!ok)
-    {
-      g_warning ("Error checking machine name against"
-                 " whitelist/blacklist, continuing anyway");
-      g_error_free (error);
-    }
-  else if (!passed)
-    {
-      g_message ("Machine name `%s' did not pass"
-                 " whitelist/blacklist check, exiting",
-                 machine);
-      exit (EXIT_SUCCESS);
-    }
-}
-
-
 static void
 terminate (int signal)
 {
@@ -452,222 +452,18 @@ setup_signals ()
 }
 
 
-/** This function will close @fd */
-static gchar *
-read_machine_conf_file (const gchar *filename,
-                        int          fd)
-{
-  GInputStream *unix_stream;
-  GDataInputStream *data_stream;
-  gboolean try_again;
-  gchar *line;
-  GError *error = NULL;
-
-  g_debug ("Reading machine configuration file `%s'", filename);
-
-  unix_stream = g_unix_input_stream_new (fd, TRUE);
-  g_assert (unix_stream != NULL);
-
-  data_stream = g_data_input_stream_new (unix_stream);
-  g_assert (data_stream != NULL);
-  g_object_unref (unix_stream);
-
-  do
-    {
-      try_again = FALSE;
-
-      line = g_data_input_stream_read_line_utf8
-        (data_stream, NULL, NULL, &error);
-
-      if (error)
-        {
-          g_warning ("Error reading from machine"
-                     " configuration file `%s': %s",
-                     filename, error->message);
-          g_error_free (error);
-        }
-      else if (line)
-        {
-          g_strstrip (line);
-
-          // Skip comments and empty lines
-          if (line[0] == '#' || line[0] == '\0')
-            {
-              g_free (line);
-              try_again = TRUE;
-            }
-        }
-    }
-  while (try_again);
-
-  g_object_unref (data_stream);
-  return line;
-}
-
-
-static gchar *
-dir_machine_conf (const gchar *dir,
-                  const gchar *machine,
-                  const gchar *key)
-{
-  gchar *filename;
-  int fd;
-  gchar *value = NULL;
-
-  filename = g_build_filename (dir, APP_DATA_NAME,
-                               "machine-conf",
-                               machine, key, NULL);
-
-  g_debug ("Trying machine configuration file `%s'",
-           filename);
-
-  fd = g_open (filename, O_RDONLY, 0);
-  if (fd == -1)
-    {
-      if (errno != ENOENT)
-        {
-          // The error isn't that the file doesn't exist
-          g_warning ("Error opening machine"
-                     " configuration file `%s': %s",
-                     filename, g_strerror (errno));
-        }
-    }
-  else
-    {
-      value = read_machine_conf_file (filename, fd);
-    }
-
-  g_free (filename);
-  return value;
-}
-
-
-static gchar *
-machine_conf (const gchar *machine,
-              const gchar *key)
-{
-  gchar *value = NULL;
-  const gchar * const *dirs, * const *dir;
-
-
-#define try_dir(d)                                      \
-  value = dir_machine_conf (d, machine, key);           \
-  if (value)                                            \
-    {                                                   \
-      return value;                                     \
-    }
-
-
-  try_dir (g_get_user_config_dir ());
-
-  dirs = g_get_system_config_dirs ();
-  for (dir = dirs; *dir; ++dir)
-    {
-      try_dir (*dir);
-    }
-
-  try_dir (SYSCONFDIR);
-  try_dir (DATADIR);
-
-  dirs = g_get_system_data_dirs ();
-  for (dir = dirs; *dir; ++dir)
-    {
-      try_dir (*dir);
-    }
-
-#undef try_dir
-
-  return NULL;
-}
-
-
-static void
-ensure_alsa_card (const gchar  *machine,
-                  const gchar  *var,
-                  const gchar  *key,
-                        gchar **name)
-{
-  const gchar *env;
-
-  if (*name)
-    {
-      return;
-    }
-
-  env = g_getenv (var);
-  if (env)
-    {
-      *name = g_strdup (env);
-      return;
-    }
-
-  if (machine)
-    {
-      *name = machine_conf (machine, key);
-      if (*name)
-        {
-          return;
-        }
-    }
-
-  g_warning ("No %s specified with a machine configuration file"
-             ", environment variable or command line option"
-             "; refusing to run", key);
-  exit (EXIT_SUCCESS);
-}
-
-
 int
 main (int argc, char **argv)
 {
   GError *error = NULL;
   GOptionContext *context;
   gboolean ok;
-  g_autofree gchar *codec = NULL;
-  g_autofree gchar *modem = NULL;
-  g_autofree gchar *machine = NULL;
-
-  GOptionEntry options[] =
-    {
-      { "codec", 'c', 0, G_OPTION_ARG_STRING, &codec, "Name of the codec's ALSA card", "NAME" },
-      { "modem", 'm', 0, G_OPTION_ARG_STRING, &modem, "Name of the modem's ALSA card", "NAME" },
-      { NULL }
-    };
 
   setlocale(LC_ALL, "");
 
-  machine = mchk_read_machine (NULL);
-  if (machine)
-    {
-      check_machine (machine);
-    }
-  else
-    {
-      g_warning ("Could not read machine name, continuing without machine check");
-    }
-
-
-  context = g_option_context_new ("- set up PulseAudio loopback for phone call audio");
-  g_option_context_add_main_entries (context, options, NULL);
-  ok = g_option_context_parse (context, &argc, &argv, &error);
-  if (!ok)
-    {
-      g_print ("Error parsing options: %s\n", error->message);
-    }
-
-
-  if (machine)
-    {
-      /* Convert any directory separator characters to "_" */
-      g_strdelimit (machine, G_DIR_SEPARATOR_S, '_');
-    }
-
-  ensure_alsa_card (machine, "WYS_CODEC", "codec", &codec);
-  ensure_alsa_card (machine, "WYS_MODEM", "modem", &modem);
-
   setup_signals ();
 
-  run (codec, modem);
+  run ();
 
   return 0;
 }
diff --git src/meson.build src/meson.build
index 7b99235..a8a30d7 100644
--- src/meson.build
+++ src/meson.build
@@ -22,13 +22,10 @@
 gnome = import('gnome')
 
 wys_deps = [
-  libmchk_dep,
   dependency('gobject-2.0'),
   dependency('gio-unix-2.0'),
   dependency('ModemManager'),
   dependency('mm-glib'),
-  dependency('libpulse'),
-  dependency('libpulse-mainloop-glib'),
 ]
 
 config_h = configure_file (
@@ -36,20 +33,13 @@ config_h = configure_file (
   configuration: config_data
 )
 
-wys_enum_headers = files(['wys-direction.h'])
-wys_enum_sources = gnome.mkenums_simple('enum-types',
-                                        sources : wys_enum_headers)
-
 executable (
   'wys',
   config_h,
-  wys_enum_sources,
   [
     'main.c',
     'util.h', 'util.c',
-    'wys-direction.h', 'wys-direction.c',
     'wys-modem.h', 'wys-modem.c',
-    'wys-audio.h', 'wys-audio.c',
   ],
   dependencies : wys_deps,
   include_directories : include_directories('..'),
diff --git src/wys-modem.c src/wys-modem.c
index 212f992..51a0575 100644
--- src/wys-modem.c
+++ src/wys-modem.c
@@ -24,18 +24,10 @@
 
 
 #include "wys-modem.h"
-#include "wys-direction.h"
 #include "util.h"
-#include "enum-types.h"
 
 #include <glib/gi18n.h>
 
-static const gchar * const WYS_MODEM_HAS_AUDIO[] =
-  {
-   [WYS_DIRECTION_FROM_NETWORK] = "wys-has-audio-from-network",
-   [WYS_DIRECTION_TO_NETWORK]   = "wys-has-audio-to-network"
-  };
-
 struct _WysModem
 {
   GObject parent_instance;
@@ -43,8 +35,8 @@ struct _WysModem
   MMModemVoice *voice;
   /** Map of D-Bus object paths to MMCall objects */
   GHashTable *calls;
-  /** How many calls have audio, in each direction */
-  guint audio_count[2];
+  /** How many calls have audio */
+  guint audio_count;
 };
 
 G_DEFINE_TYPE(WysModem, wys_modem, G_TYPE_OBJECT)
@@ -65,15 +57,11 @@ static guint signals [SIGNAL_LAST_SIGNAL];
 
 
 static gboolean
-call_state_has_audio (WysDirection direction,
-                      MMCallState  state)
+call_state_has_audio (MMCallState  state)
 {
   switch (state)
     {
     case MM_CALL_STATE_RINGING_OUT:
-      return
-        (direction == WYS_DIRECTION_FROM_NETWORK)
-        ? TRUE : FALSE;
     case MM_CALL_STATE_ACTIVE:
       return TRUE;
     default:
@@ -84,39 +72,35 @@ call_state_has_audio (WysDirection direction,
 
 static void
 update_audio_count (WysModem     *self,
-                    WysDirection  direction,
                     gint          delta)
 {
-  const guint old_count = self->audio_count[direction];
+  const guint old_count = self->audio_count;
 
-  g_assert (delta >= 0 || self->audio_count[direction] > 0);
+  g_assert (delta >= 0 || self->audio_count > 0);
 
-  self->audio_count[direction] += delta;
+  self->audio_count += delta;
 
-  if (self->audio_count[direction] > 0 && old_count == 0)
+  if (self->audio_count > 0 && old_count == 0)
     {
-      g_debug ("Modem `%s' audio %s now present",
-               mm_modem_voice_get_path (self->voice),
-               wys_direction_get_description (direction));
-      g_signal_emit_by_name (self, "audio-present", direction);
+      g_message ("Modem `%s' audio now present",
+                 mm_modem_voice_get_path (self->voice));
+      g_signal_emit_by_name (self, "audio-present");
     }
-  else if (self->audio_count[direction] == 0 && old_count > 0)
+  else if (self->audio_count == 0 && old_count > 0)
     {
-      g_debug ("Modem `%s' audio now absent",
-               mm_modem_voice_get_path (self->voice));
-      g_signal_emit_by_name (self, "audio-absent", direction);
+      g_message ("Modem `%s' audio now absent",
+                 mm_modem_voice_get_path (self->voice));
+      g_signal_emit_by_name (self, "audio-absent");
     }
 }
 
 
 static gboolean
-get_call_has_audio (MMCall       *mm_call,
-                    WysDirection  direction)
+get_call_has_audio (MMCall *mm_call)
 {
   gpointer data;
 
-  data = g_object_get_data (G_OBJECT (mm_call),
-                            WYS_MODEM_HAS_AUDIO[direction]);
+  data = g_object_get_data (G_OBJECT (mm_call), "audio-state");
 
   return (gboolean)(GPOINTER_TO_UINT (data));
 }
@@ -124,42 +108,38 @@ get_call_has_audio (MMCall       *mm_call,
 
 static void
 set_call_has_audio (MMCall       *mm_call,
-                    WysDirection  direction,
                     gboolean      has_audio)
 {
   g_object_set_data (G_OBJECT (mm_call),
-                     WYS_MODEM_HAS_AUDIO[direction],
+                     "audio-state",
                      GUINT_TO_POINTER ((guint)has_audio));
 }
 
 
 static void
-update_direction_state (WysModem     *self,
-                        MMCall       *mm_call,
-                        const gchar  *path,
-                        WysDirection  direction,
-                        MMCallState   old_state,
-                        MMCallState   new_state)
+update_call_state (WysModem     *self,
+                   MMCall       *mm_call,
+                   const gchar  *path,
+                   MMCallState   old_state,
+                   MMCallState   new_state)
 {
-  gboolean had_audio  = call_state_has_audio (direction, old_state);
-  gboolean have_audio = call_state_has_audio (direction, new_state);
+  gboolean had_audio  = call_state_has_audio (old_state);
+  gboolean have_audio = call_state_has_audio (new_state);
 
   if (!had_audio && have_audio)
     {
-      g_debug ("Call `%s' gained audio %s", path,
-               wys_direction_get_description (direction));
-      update_audio_count (self, direction, +1);
+      g_message ("Call `%s' gained audio", path);
+      update_audio_count (self, +1);
     }
   else if (had_audio && !have_audio)
     {
-      g_debug ("Call `%s' lost audio %s", path,
-               wys_direction_get_description (direction));
-      update_audio_count (self, direction, -1);
+      g_message ("Call `%s' lost audio", path);
+      update_audio_count (self, -1);
     }
 
   if (had_audio != have_audio)
     {
-      set_call_has_audio (mm_call, direction, have_audio);
+      set_call_has_audio (mm_call, have_audio);
     }
 }
 
@@ -174,34 +154,28 @@ call_state_changed_cb (MmGdbusCall       *mm_gdbus_call,
   MMCall *mm_call = MM_CALL (mm_gdbus_call);
   const gchar * path = mm_call_get_path (mm_call);
 
-  g_debug ("Call `%s' state changed, new: %i, old: %i",
+  g_message ("Call `%s' state changed, new: %i, old: %i",
            path, (int)new_state, (int)old_state);
 
   // FIXME: deal with calls being put on hold (one call goes
   // non-audio, another call goes audio after)
 
-  update_direction_state (self, mm_call, path,
-                          WYS_DIRECTION_FROM_NETWORK,
-                          old_state, new_state);
-  update_direction_state (self, mm_call, path,
-                          WYS_DIRECTION_TO_NETWORK,
-                          old_state, new_state);
+  update_call_state (self, mm_call, path, old_state, new_state);
 }
 
 
 static void
-init_call_direction (WysModem     *self,
-                     MMCall       *mm_call,
-                     MMCallState   state,
-                     WysDirection  direction)
+init_call_audio (WysModem     *self,
+                 MMCall       *mm_call,
+                 MMCallState   state)
 {
-  gboolean has_audio = call_state_has_audio (direction, state);
+  gboolean has_audio = call_state_has_audio (state);
 
-  set_call_has_audio (mm_call, direction, has_audio);
+  set_call_has_audio (mm_call, has_audio);
 
   if (has_audio)
     {
-      update_audio_count (self, direction, +1);
+      update_audio_count (self, +1);
     }
 }
 
@@ -223,12 +197,9 @@ add_call (WysModem *self,
                     self);
 
   state = mm_call_get_state (mm_call);
-  init_call_direction (self, mm_call, state,
-                       WYS_DIRECTION_FROM_NETWORK);
-  init_call_direction (self, mm_call, state,
-                       WYS_DIRECTION_TO_NETWORK);
+  init_call_audio (self, mm_call, state);
 
-  g_debug ("Call `%s' added, state: %i", path, (int)state);
+  g_message ("Call `%s' added, state: %i", path, (int)state);
 }
 
 
@@ -322,16 +293,14 @@ call_added_cb (MMModemVoice  *voice,
 
 
 static void
-clear_call_direction (WysModem     *self,
-                      MMCall       *mm_call,
-                      WysDirection  direction)
+clear_call_state (WysModem     *self,
+                  MMCall       *mm_call)
 {
-  gboolean has_audio =
-    get_call_has_audio (mm_call, direction);
+  gboolean has_audio = get_call_has_audio (mm_call);
 
   if (has_audio)
     {
-      update_audio_count (self, direction, -1);
+      update_audio_count (self, -1);
     }
 }
 
@@ -343,7 +312,7 @@ call_deleted_cb (MMModemVoice *voice,
 {
   MMCall *mm_call;
 
-  g_debug ("Removing call `%s'", path);
+  g_message ("Removing call `%s'", path);
 
   mm_call = g_hash_table_lookup (self->calls, path);
   if (!mm_call)
@@ -352,14 +321,11 @@ call_deleted_cb (MMModemVoice *voice,
       return;
     }
 
-  clear_call_direction (self, mm_call,
-                        WYS_DIRECTION_FROM_NETWORK);
-  clear_call_direction (self, mm_call,
-                        WYS_DIRECTION_TO_NETWORK);
+  clear_call_state (self, mm_call);
 
   g_hash_table_remove (self->calls, path);
 
-  g_debug ("Call `%s' removed", path);
+  g_message ("Call `%s' removed", path);
 }
 
 
@@ -444,11 +410,9 @@ dispose (GObject *object)
   if (g_hash_table_size (self->calls) > 0)
     {
       g_hash_table_remove_all (self->calls);
-      if (self->audio_count[WYS_DIRECTION_FROM_NETWORK] > 0 ||
-          self->audio_count[WYS_DIRECTION_TO_NETWORK] > 0)
+      if (self->audio_count > 0)
         {
-          self->audio_count[WYS_DIRECTION_FROM_NETWORK] =
-            self->audio_count[WYS_DIRECTION_TO_NETWORK] = 0;
+          self->audio_count = 0;
           g_signal_emit_by_name (self, "audio-absent");
         }
     }
@@ -504,8 +468,7 @@ wys_modem_class_init (WysModemClass *klass)
                   G_SIGNAL_RUN_LAST,
                   0, NULL, NULL, NULL,
                   G_TYPE_NONE,
-                  1,
-                  WYS_TYPE_DIRECTION);
+                  0);
 
   /**
    * WysModem::audio-absent:
@@ -520,8 +483,7 @@ wys_modem_class_init (WysModemClass *klass)
                   G_SIGNAL_RUN_LAST,
                   0, NULL, NULL, NULL,
                   G_TYPE_NONE,
-                  1,
-                  WYS_TYPE_DIRECTION);
+                  0);
 }
 
 
